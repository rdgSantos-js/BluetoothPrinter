plugins {
    alias(libs.plugins.android.library) // Alterado de application para library
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose) // Added Compose Compiler plugin
    //alias(libs.plugins.kotlin.compose) // REMOVED: Deprecated plugin
    id 'maven-publish' // Adicionado plugin maven-publish
}

android {
    namespace 'com.example.btprint'
    compileSdkVersion 36

    defaultConfig {
        // applicationId "com.example.btprint" // Removido para bibliotecas
        minSdk 24
        // targetSdk 36 // targetSdk é geralmente herdado de compileSdk para bibliotecas, mas pode ser especificado
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation(libs.escpos.thermalprinter.android)
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.example'
            artifactId = 'btprint'
            version = '1.0.0'

            afterEvaluate {
                from components.release
            }
        }

        debug(MavenPublication) {
            groupId = 'com.example'
            artifactId = 'btprint'
            version = '1.0.0-SNAPSHOT'

            afterEvaluate {
                from components.debug
            }
        }
    }
    repositories {
        maven {
            name = "internal" // Nomeando o repositório
            def repoPath = System.getenv("GENEXUS_REPO")
            if (repoPath == null || repoPath.isEmpty()) {
                // Você pode querer lançar um erro aqui se a variável não estiver definida
                // throw new InvalidUserDataException("Variável de ambiente GENEXUS_REPO não definida.")
                // Ou usar um fallback, como o diretório de build do projeto:
                // url = uri("${rootProject.layout.buildDirectory.get().asFile}/repo")
                // Por enquanto, vamos manter a lógica que pode falhar se não definida,
                // para que você seja alertado.
                // Para evitar falha no sync inicial se a variável não estiver setada no ambiente do IDE:
                url = uri(rootProject.layout.buildDirectory.get().asFile.toString() + "/repo_fallback_GENEXUS_REPO_not_set")

            } else {
                url = uri(repoPath)
            }
        }
    }
}